// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SensorMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SensorMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

SensorMsg::SensorMsg()
{
    // m_sensor_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5bcea91b
    m_sensor_id = 0;
    // m_temperature com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f3a4b84
    m_temperature = 0.0;
    // m_timestamp com.eprosima.idl.parser.typecode.StringTypeCode@27f723
    m_timestamp ="";

}

SensorMsg::~SensorMsg()
{


}

SensorMsg::SensorMsg(
        const SensorMsg& x)
{
    m_sensor_id = x.m_sensor_id;
    m_temperature = x.m_temperature;
    m_timestamp = x.m_timestamp;
}

SensorMsg::SensorMsg(
        SensorMsg&& x) noexcept 
{
    m_sensor_id = x.m_sensor_id;
    m_temperature = x.m_temperature;
    m_timestamp = std::move(x.m_timestamp);
}

SensorMsg& SensorMsg::operator =(
        const SensorMsg& x)
{

    m_sensor_id = x.m_sensor_id;
    m_temperature = x.m_temperature;
    m_timestamp = x.m_timestamp;

    return *this;
}

SensorMsg& SensorMsg::operator =(
        SensorMsg&& x) noexcept
{

    m_sensor_id = x.m_sensor_id;
    m_temperature = x.m_temperature;
    m_timestamp = std::move(x.m_timestamp);

    return *this;
}

bool SensorMsg::operator ==(
        const SensorMsg& x) const
{

    return (m_sensor_id == x.m_sensor_id && m_temperature == x.m_temperature && m_timestamp == x.m_timestamp);
}

bool SensorMsg::operator !=(
        const SensorMsg& x) const
{
    return !(*this == x);
}

size_t SensorMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t SensorMsg::getCdrSerializedSize(
        const SensorMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.timestamp().size() + 1;


    return current_alignment - initial_alignment;
}

void SensorMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sensor_id;
    scdr << m_temperature;
    scdr << m_timestamp.c_str();

}

void SensorMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sensor_id;
    dcdr >> m_temperature;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member sensor_id
 * @param _sensor_id New value for member sensor_id
 */
void SensorMsg::sensor_id(
        uint32_t _sensor_id)
{
    m_sensor_id = _sensor_id;
}

/*!
 * @brief This function returns the value of member sensor_id
 * @return Value of member sensor_id
 */
uint32_t SensorMsg::sensor_id() const
{
    return m_sensor_id;
}

/*!
 * @brief This function returns a reference to member sensor_id
 * @return Reference to member sensor_id
 */
uint32_t& SensorMsg::sensor_id()
{
    return m_sensor_id;
}

/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void SensorMsg::temperature(
        double _temperature)
{
    m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
double SensorMsg::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
double& SensorMsg::temperature()
{
    return m_temperature;
}

/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void SensorMsg::timestamp(
        const std::string& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void SensorMsg::timestamp(
        std::string&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const std::string& SensorMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
std::string& SensorMsg::timestamp()
{
    return m_timestamp;
}

size_t SensorMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool SensorMsg::isKeyDefined()
{
    return false;
}

void SensorMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
